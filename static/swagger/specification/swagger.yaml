swagger: '2.0'
info:
  version: 1.0.0
  title: SAM Rest API
  description: 
    SAM API
    
    Find source code of this API [here](localhost:5000)
host: localhost:5000
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
  - text/xml
produces:
  - application/json
  - text/html
paths:

  /users:
    get:
      responses:
        200:
          description:  List all users
          schema:
            title: Users
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      parameters:
        - name: User
          in: body
          description: User name
          schema:
            $ref: '#/definitions/User'
          required: true
      responses:
        200:
          description: Created User
        409:
          description: User already exists
          schema:
            title: respone
            type: object
            items: 
              $ref: '#/definitions/error'
    
  /users/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: integer
          description: ID of the User
          required: true
      responses:
        200:
          description: Sends the user with the ID
        400:
          description: User doesn't exist
          schema:
            title: respone
            type: object
            items: 
              $ref: '#/definitions/error'
    put:
      parameters:
        - name: id
          in: path
          type: integer
          description: ID of the User
          required: true
        - in: body
          name: user
          description: User details
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Updates the user with the id, and replaces with Body
        404:
          description: User not found
          schema:
            title: respone
            type: object
            items: 
              $ref: '#/definitions/error'
          
    delete:
      parameters:
        - name: id
          in: path
          type: integer
          description: ID of the User
          required: true
      responses:
        200:
          description: Deletes the user with the ID
        204:
          description: User does not exist
          schema:
            title: respone
            type: object
            items: 
              $ref: '#/definitions/error'
  
  /vault/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: integer
          description: Vault of the user
          required: true
        - in: body
          name: vault
          description: view all entries in a user vault
          required: true
          schema: 
            $ref: '#/definitions/vault'
    post:
      parameters:
        - name: id
          in: path
          type: integer
          description: Vault of the User
          required: true
        - in: body
          name: vault
          description: create vault with user account information
          required: true
          schema:
            $ref: '#/definitions/vault'
        
      responses:
        200:
          description: create a vault entry
        400:
          description: error
          schema:
            title: respone
            type: object
            items: 
              $ref: '#/definitions/error'
    
  

definitions:
  User:
    type: object
    properties:
      name:
        type: string
      last:
        type: string
      email: 
        type: string
      password: 
        type: password
      vault:
        $ref: '#/definitions/vault'
  vault: 
    type: object
    properties:
      user_id:
        type: array
        items:
          $ref: '#/definitions/entry'

  entry: 
    type: object
    properties: 
      username:
        type: string
      password:
        type: string
  
  error:
    type: object
    properties:
      error:
        type: string
